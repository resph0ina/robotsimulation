#include "ros/ros.h"
#include "interface/KeepStaticParameter.h"
#include "std_msgs/Float64.h"
#include <sstream>

 std_msgs::Float64 msg1;
 std_msgs::Float64 msg2;
 std_msgs::Float64 msg3;
 std_msgs::Float64 msg4;

bool KeepStatic_server(interface::KeepStaticParameter::Request  &req,interface::KeepStaticParameter::Response &res)
{
  msg1.data = req.position_neck_head;
  msg2.data = req.position_baselink_neck;
  msg3.data = req.velocity_left_fw;
  msg4.data = req.velocity_right_fw;
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "simulator_KeepStatic_server");
  ros::NodeHandle n;
  
  ros::Publisher neck_head_position_pub = n.advertise<std_msgs::Float64>("body/neck_head_position_controller/command", 1000);
  ros::Publisher baselink_neck_position_pub = n.advertise<std_msgs::Float64>("body/baselink_neck_position_controller/command", 1000);
  ros::Publisher left_front_wheel_velocity_pub = n.advertise<std_msgs::Float64>("body/left_front_wheel_velocity_controller/command", 1000);
  ros::Publisher right_front_wheel_velocity_pub = n.advertise<std_msgs::Float64>("/body/right_front_wheel_velocity_controller/command", 1000);
  ros::Rate loop_rate(1);

  ROS_INFO("Ready to accept orders and publish topic.");
  ros::ServiceServer service = n.advertiseService("KeepStatic", KeepStatic_server); 
  while (ros::ok())
  {
   	
        ROS_INFO("publishing topics...%lf,%lf,%lf,%lf",msg1.data,msg2.data,msg3.data,msg4.data);
 
   	neck_head_position_pub.publish(msg1);       
        baselink_neck_position_pub.publish(msg2);
	left_front_wheel_velocity_pub.publish(msg3);
	right_front_wheel_velocity_pub.publish(msg4);

   	ros::spinOnce();
    	loop_rate.sleep();
  }	

  ROS_INFO("Ready to accept orders and publish topic.");
  ros::spin();

  return 0;
}
